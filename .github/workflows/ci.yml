on: push

jobs:
  check:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind_cmake_gtest
    steps:
      - uses: actions/checkout@v2
      - run: apt install -y clang-format
      - run: cmake -B build
      - run: make -C build check

  build:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind_cmake_gtest
    needs: [check]
    steps:
    - name: Fetch
      uses: actions/checkout@v2
    - name: Build sequential implementation
      run: |
          echo "***************************** BUILD SEQUENTIAL IMPLEMENTATION *****************************"
          cmake -B build -DLINTERS=OFF -DWITH_MEMCHECK=OFF
          make -C build
    - name: Build parallel implementation
      run: |
          echo "****************************** BUILD PARALLEL IMPLEMENTATION ******************************"
          cmake -B build -DPARALLEL=ON
          make -C build

  buildcheck:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind_cmake_gtest
    needs: [build]
    steps:
    - name: Fetch
      uses: actions/checkout@v2
      run: apt install -y clang-tools
    - name: Check build sequential implementation
      run: |
          echo "************************** CHECK BUILD SEQUENTIAL IMPLEMENTATION **************************"
          cmake -B build -DLINTERS=OFF -DWITH_MEMCHECK=OFF
          scan-build make -C build
    - name: Check build parallel implementation
      run: |
          echo "*************************** CHECK BUILD PARALLEL IMPLEMENTATION ***************************"
          cmake -B build -DPARALLEL=ON
          scan-build make -C build

  test:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind_cmake_gtest
    needs: [buildcheck]
    steps:
    - name: Fetch
      uses: actions/checkout@v2
      with:
          submodules: recursive
    - name: Test sequential algorithm
      run: |
        echo "**************************** TESTING SEQUENTIAL IMPLEMENTATION ****************************"
        cmake -B build -DTESTING=ON -DCOVERAGE=ON
        make -C build test
        apt-get install -y gcovr
        gcovr -x -o ./build/coverage_report_seq.xml
    - name: Test parallel algorithm
      run: |
        echo "**************************** TESTING PARALLEL IMPLEMENTATION ****************************"
        cmake -B build -DPARALLEL=ON
        make -C build test
        apt-get install -y gcovr
        gcovr -x -o ./build/coverage_report_paral.xml
    - name: Test time
      run: |
        echo "****************************** TIME PARALLEL IMPLEMENTATION ******************************"
        ./project/tests/create_big_data.py build/project/tests/data.txt 50000
        ./build/project/tests/time_test -f data.txt
        echo "***************************** TIME SEQUENTIAL IMPLEMENTATION *****************************"
        cmake -B build -DPARALLEL=OFF -DLINTERS=OFF -DWITH_MEMCHECK=OFF
        make -C build
        ./build/project/tests/time_test -f data.txt
    - name: Stress Test
      run: |
        echo "*************************************** STRESS TEST ***************************************"
        project/tests/create_big_data.py build/project/tests/big_data.txt
        ./build/hw2 -f build/project/tests/big_data.txt > out_sequential.txt
        cmake -B build -DPARALLEL=ON
        make -C build
        ./build/hw2 -f build/project/tests/big_data.txt > out_parallel.txt
        ./comparison.sh
    - name: Upload
      uses: codecov/codecov-action@v2
      with:
        token: 81ca858b-d5ea-41bf-96f3-2db485fada4d
        files: coverage_report_seq.xml coverage_report_paral.xml
        

  sanitizers:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind_cmake_gtest
    needs: [test]
    steps:
    - name: Fetch
      uses: actions/checkout@v2
    - name: Sanitize sequential implementation
      run: |
          echo "**************************** SANITIZE SEQUENTIAL IMPLEMENTATION ***************************"
          cmake -B build -DSANITIZERS=ON -DTESTING=ON
          make -C build test
    - name: Sanitize parallel implementation
      run: |
          echo "**************************** SANITIZE PARALLEL IMPLEMENTATION ***************************"
          cmake -B build -DPARALLEL=ON
          make -C build test

  memtest:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind_cmake_gtest
    needs: [sanitizers]
    steps:
    - name: Fetch
      uses: actions/checkout@v2
    - name: Memory check sequential implementation
      run: |
          echo "************************** MEMORY CHECK SEQUENTIAL IMPLEMENTATION *************************"
          cmake -B build
          make -C build memcheck
    - name: Memory check parallel implementation
      run: |
          echo "*************************** MEMORY CHECK PARALLEL IMPLEMENTATION **************************"
          cmake -B build -DPARALLEL=ON
          make -C build memcheck

